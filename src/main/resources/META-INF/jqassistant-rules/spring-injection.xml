<jqa:jqassistant-rules xmlns:jqa="http://www.buschmais.com/jqassistant/core/analysis/rules/schema/v1.1">

    <group id="spring-injection:Default">
        <includeConstraint refId="spring-injection:InjectablesMustNotBeInstantiated"/>
        <includeConstraint refId="spring-injection:BeanProducerMustBeDeclaredInConfigurationComponent" />
        <includeConstraint refId="spring-injection:FieldsInitializedByConstructorMustNotBeManipulated"/>
        <includeConstraint refId="spring-injection:AvoidInitializingBean"/>
        <includeConstraint refId="spring-injection:AvoidDisposableBean"/>
        <includeConstraint refId="spring-injection:AvoidAwareInterfacesInFavorOfInjection"/>
    </group>

    <group id="spring-injection:Strict">
        <includeConstraint refId="spring-injection:FieldInjectionIsNotAllowed"/>
    </group>

    <concept id="spring-injection:Injectable">
        <requiresConcept refId="spring-component:Component"/>
        <requiresConcept refId="spring-injection:BeanProducer"/>
        <description>Returns all injectables.</description>
        <cypher><![CDATA[
            MATCH
              (injectable:Spring:Injectable)
            RETURN
              injectable as Injectable
        ]]></cypher>
    </concept>

    <concept id="spring-injection:BeanProducer">
        <description>Labels methods which are annotated with "@org.springframework.context.annotation.Bean" with
            "BeanProducer" and their return types with "Spring" and "Injectable".
        </description>
        <cypher><![CDATA[
           MATCH
              (:Type)-[:DECLARES]->(beanProducer:Method)-[:ANNOTATED_BY]->()-[:OF_TYPE]->(annotationType:Type),
              (beanProducer)-[:RETURNS]->(injectable:Type)
            WHERE
              annotationType.fqn = "org.springframework.context.annotation.Bean"
            SET
              injectable:Spring:Injectable,
              beanProducer:Spring:BeanProducer
            RETURN
              injectable as Injectable, beanProducer as BeanProducer
        ]]></cypher>
    </concept>

    <constraint id="spring-injection:InjectablesMustNotBeInstantiated">
        <requiresConcept refId="spring-injection:Injectable"/>
        <description>Injectables types must not be instantiated directly except by @Bean methods or test code.
        </description>
        <cypher><![CDATA[
            MATCH
              (injectable:Injectable:Type)-[:DECLARES]->(constructor:Constructor),
              (artifact:Artifact)-[:CONTAINS]->(type:Type)-[:DECLARES]->(method:Method)-[newInstance:INVOKES]->(constructor)
            WHERE NOT (
              (has(artifact.type) and artifact.type="test-jar")
              OR method:Spring:BeanProducer
            )
            RETURN
              type as Type, method as Method, injectable as Injectable,
              newInstance.lineNumber as LineNumber
        ]]></cypher>
    </constraint>

    <constraint id="spring-injection:BeanProducerMustBeDeclaredInConfigurationComponent">
        <requiresConcept refId="spring-injection:BeanProducer"/>
        <requiresConcept refId="spring-component:Configuration"/>
        <description>Bean producer methods must be declared in configuration components.</description>
        <cypher><![CDATA[
            MATCH
              (type:Type)-[:DECLARES]->(beanProducer:Method:BeanProducer)-[:RETURNS]->(injectable:Injectable)
            WHERE NOT
              type:Spring:Component:Configuration
            RETURN
              beanProducer as BeanProducer, injectable as Injectable
        ]]></cypher>
    </constraint>

    <concept id="spring-injection:InjectionPoint">
        <description>Labels all type members annotated with "@org.springframework.beans.factory.annotation.Autowired"
            with "Spring" and "InjectionPoint".
        </description>
        <cypher><![CDATA[
            MATCH
              (injectionPoint:Member)-[:ANNOTATED_BY]->()-[:OF_TYPE]->(annotationType:Type)
            WHERE
              annotationType.fqn in [
                "org.springframework.beans.factory.annotation.Autowired",
                "javax.inject.Inject",
                "javax.annotation.Resource"
              ]
            SET
              injectionPoint:Spring:InjectionPoint
            RETURN
              injectionPoint as InjectionPoint
        ]]></cypher>
    </concept>

    <constraint id="spring-injection:FieldInjectionIsNotAllowed">
        <requiresConcept refId="spring-injection:InjectionPoint"/>
        <description>Field injection is not allowed, use constructor injection instead.</description>
        <cypher><![CDATA[
            MATCH
              (type:Type)-[:DECLARES]->(field:Field:InjectionPoint),
              (artifact:Artifact)-[:CONTAINS]->(type:Type)
            WHERE NOT
              (has(artifact.type) and artifact.type="test-jar")
            RETURN
              type as Type, field as Field
        ]]></cypher>
    </constraint>

    <constraint id="spring-injection:FieldsInitializedByConstructorMustNotBeManipulated">
        <requiresConcept refId="spring-injection:Injectable"/>
        <description>Fields of injectable types that are written by a constructor must not be manipulated by
            non-constructor methods.
        </description>
        <cypher><![CDATA[
            MATCH
              (injectable:Injectable),
              (injectable)-[:DECLARES]->(constructor:Constructor)-[:WRITES]->(field:Field),
              (injectable)-[:DECLARES]->(method:Method)-[writes:WRITES]->(field:Field)
            WHERE NOT
               method:Constructor
            RETURN
              injectable as Injectable, method as Method, field as Field, writes.lineNumber as LineNumber
        ]]></cypher>
    </constraint>

    <constraint id="spring-injection:AvoidInitializingBean">
        <description>Prefer to use @PostConstruct over implementing InitializingBean.
        </description>
        <cypher><![CDATA[
            MATCH
              (type:Type)-[:IMPLEMENTS]->(otherType:Type)
            WHERE
              otherType.fqn = "org.springframework.beans.factory.InitializingBean"
            RETURN
              type as Component
        ]]></cypher>
    </constraint>

    <constraint id="spring-injection:AvoidDisposableBean">
        <description>Prefer to use @PreDestroy over implementing DisposableBean.
        </description>
        <cypher><![CDATA[
            MATCH
              (type:Type)-[:IMPLEMENTS]->(otherType:Type)
            WHERE
              otherType.fqn = "org.springframework.beans.factory.DisposableBean"
            RETURN
              type as Component
        ]]></cypher>
    </constraint>

    <constraint id="spring-injection:AvoidAwareInterfacesInFavorOfInjection">
        <description>Prefer to inject framework components over implementing â€¦Aware interfaces.
        </description>
        <cypher><![CDATA[
            MATCH
              (type:Type)-[:IMPLEMENTS]->(otherType:Type)
            WHERE
              otherType.fqn in [
                "org.springframework.beans.factory.BeanFactoryAware",
                "org.springframework.context.ApplicationContextAware",
                "org.springframework.context.ApplicationEventPublisherAware"
              ]
            RETURN
              type as Component, otherType as ImplementedInterface
        ]]></cypher>
    </constraint>

</jqa:jqassistant-rules>
